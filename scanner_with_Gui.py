# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Scanner.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog,QTextBrowser ,QTableWidget ,QTableWidgetItem
from PyQt5.QtGui import QIcon

Reserved_Words = {'if': 'IF',
                  'then': 'THEN',
                  'else': 'ELSE',
                  'end': 'END',
                  'repeat': 'REPEAT',
                  'until': 'UNTIL',
                  'read': 'READ',
                  'write': 'WRITE',
                  'factorial': 'FACTORIAL'}
Reserved_Words_key = Reserved_Words.keys()
Special_Symbols = {
    ':=': 'ASSIGNMENT',
    '<=': 'LESS|EQUAL',
    '>=': 'GREATER|EQUAL',
    '+': 'PLUS',
    '-': 'MINUS',
    '*': 'MUL',
    '/': 'DIVISION',
    '<': 'LESS',
    '>': 'GREATER',
    ';': 'SEMICOLON',
    '(': 'OPEN_PARENTHESIS',
    ')': 'CLOSE_PARENTHESIS',
    '=': 'EQUALS',
    ':': 'COLON'}
Special_Symbols_key = Special_Symbols.keys()
temp_list = []
sub_token_t = []
 #temp_token_list = { }
def check(temp_token):
    symbol = " "
    
    flag=False
    found_index =100
    for s in Special_Symbols:
        
        index = temp_token.find(s)
        if index > -1:  # symbol is found
            flag=True
            if index < found_index:
                found_index = index
    if flag:
        
        if found_index == len(temp_token)-1:
            symbol = temp_token[found_index]
        elif temp_token[found_index + 1] in Special_Symbols:
            symbol = temp_token[found_index:found_index + 2]

        else:
            symbol = temp_token[found_index]
        temp_list= []

        temp_list = temp_token.split(symbol, 1)

        sub_token_t.append(temp_list[0])
        sub_token_t.append(symbol)
       
            
        #sub_token_t.append(temp_list[1])


        check(temp_list[1])

    if not flag:
        sub_token_t.append(temp_token)
    return sub_token_t


dataFlag = False


class Ui_Scanner(object):
    def setupUi(self, Scanner):
        Scanner.setObjectName("Scanner")
        Scanner.resize(1017, 785)
        Scanner.setAutoFillBackground(False)
        Scanner.setStyleSheet("")
        self.pushButton = QtWidgets.QPushButton(Scanner)
        self.pushButton.setGeometry(QtCore.QRect(90, 650, 171, 61))
        font = QtGui.QFont()
        font.setFamily("Sitka Banner")
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(Scanner)
        self.label_2.setGeometry(QtCore.QRect(330, 30, 371, 61))
        font = QtGui.QFont()
        font.setFamily("Sitka Banner")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setScaledContents(False)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.tableWidget = QtWidgets.QTableWidget(Scanner)
        self.tableWidget.setGeometry(QtCore.QRect(530, 140, 411, 521))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.textBrowser = QtWidgets.QTextBrowser(Scanner)
        self.textBrowser.setGeometry(QtCore.QRect(40, 160, 311, 471))
        self.textBrowser.setObjectName("textBrowser")
        self.label = QtWidgets.QLabel(Scanner)
        self.label.setGeometry(QtCore.QRect(100, 110, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Sitka Banner")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(Scanner)
        self.label_3.setGeometry(QtCore.QRect(670, 100, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Sitka Banner")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")

        self.retranslateUi(Scanner)
        QtCore.QMetaObject.connectSlotsByName(Scanner)
    

    def pushButton_handler(self):
            #print("button Pushed")  
        path=self.open_dialog_box()
        return path

    def open_dialog_box(self):
        filename = QFileDialog.getOpenFileName()
        path = filename[0]
        f = open(path,"r")

        with f:
            text_con = f.read()

        return text_con   
    # contant= open(f)
        
    

    def button_clicked(self):
        TokensType = []
        TokensVal = []
       
        temp = ""
        Number = 0
        Identifier = ""
        Tokens = []
        sub_tokens=[]
        if self.pushButton.isEnabled() == True:
            print("checked")
            filename = QFileDialog.getOpenFileName()
            path = filename[0]
            f = open(path,"r")

            with f:
                text_con = f.read()
            self.textBrowser.setText(text_con)
            program = text_con.split("\n")
           
                #print(Tokens)
            for line in program:
                Tokens = line.split(' ')
                Tokens = [i for i in Tokens if i]
                temp = "continue"
                i = -1
                #print(Tokens)
                for Token in Tokens:
                    i = i+1
                    if Token == "{" or temp == "{" or Token.find("{") != -1:
                        temp = "{"
                        if Token == "}":
                            temp = "continue"
                            continue
                    if temp == "continue":
                        #print(Token)
                        if Token in Special_Symbols_key:
                            TokensVal.append(Tokens[i])
                            TokensType.append(Special_Symbols.get(Tokens[i]))
                        elif Token in Reserved_Words_key:
                            TokensVal.append(Tokens[i])
                            TokensType.append(Reserved_Words.get(Tokens[i]))
                        else:
                            #print(Tokens[i])
                            sub_tokens = []
                            sub_tokens = check(Token)
                            for item in sub_tokens:

                                if item in Special_Symbols:
                                    TokensVal.append(item)
                                    TokensType.append(Special_Symbols.get(item))

                                elif len(item) > 0 and item[0].isalpha():  # if first char is a letter
                                    Identifier = item
                                    TokensVal.append(Identifier)
                                    TokensType.append("IDENTIFIER")

                                elif len(item) > 0 and not(item[0].isalpha()):
                                    Number = item
                                    TokensVal.append(Number)
                                    TokensType.append("NUMBER")
                            


            #print("TokensVal")
           # print(type(TokensVal) )
            
            fw = open('TokensTable_ui.txt', "w")
            n = len(TokensVal)
            i = 0
            while i < n:
                fw.write(TokensVal[i] + ' , ' + TokensType[i] + '\n')
                i += 1
            fw.close()
            x = open('TokensTable_ui.txt', "r")
            with x:
                result = x.read()
            #print(result)
            self.tableWidget.setRowCount(len(TokensVal))  
            self.tableWidget.setColumnCount(2)
            for x in range(len(TokensVal)):
                self.tableWidget.setItem(x,0, QTableWidgetItem(TokensVal[x]))
                self.tableWidget.setItem(x,1, QTableWidgetItem(TokensType[x]))
            
                    
    def retranslateUi(self, Scanner):
        _translate = QtCore.QCoreApplication.translate
        self.pushButton.setText(_translate("Scanner", "Browes File"))
        self.label_2.setText(_translate("Scanner", "<html><head/><body><p><span style=\" color:#aaaa00;\">Scanner Application</span></p></body></html>"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Scanner", "Token"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Scanner", "Token Type"))
        self.label.setText(_translate("Scanner", "Attached File"))
        self.label_3.setText(_translate("Scanner", "List of Tokens"))
        self.pushButton.clicked.connect(self.button_clicked)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Scanner = QtWidgets.QWidget()
    ui = Ui_Scanner()
    ui.setupUi(Scanner)
    Scanner.show()
    sys.exit(app.exec_())
